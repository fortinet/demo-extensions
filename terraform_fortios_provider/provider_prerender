terraform {
  required_providers {
    fortios = {
      source = "fortinetdev/fortios"
      version = "1.10.4"
    }
  }
}

provider "fortios" {
  hostname = "${aws_eip}"
  token    = "${token}"
  insecure = "true"
}

#CSF Settings
resource "fortios_system_csf" "csfSettings" {
  status = "enable"
  upstream_ip = "10.100.88.1"
  management_ip = "${aws_eip}"
  management_port = 443
  saml_configuration_sync = "default"
}

resource "fortios_firewall_vip" "ubuntuVIP" {
  name = "toUbuntuVIP"
  comment = "VIP to Ubuntu"
  extintf = "port1"
  portforward = "enable"
  extport = "422"
  mappedport = "22"

  mappedip {
    range = "10.0.2.100"
  }
}

resource "fortios_system_admin" "administrator" {
  accprofile                 = "super_admin"
  accprofile_override        = "disable"
  allow_remove_admin_session = "enable"
  force_password_change      = "disable"
  guest_auth                 = "disable"
  hidden                     = 0
  name                       = "cloudadmin"
  password                   = "${admin_pass}"
  password_expire            = "0000-00-00 00:00:00"
  peer_auth                  = "disable"
  radius_vdom_override       = "disable"
  remote_auth                = "disable"
  two_factor                 = "disable"
  wildcard                   = "disable"
  vdom {
    name = "root"
  }
}

#VPN Firewall Addresses
resource "fortios_firewall_address" "local" {
  name = "Fortidemo_local_subnet_1"
  allow_routing = "enable"
  subnet = "10.0.1.0 255.255.255.0"
}

resource "fortios_firewall_address" "remote" {
  name = "FortiDEMO_remote_subnet_1"
  allow_routing = "enable"
  subnet = "10.100.88.0 255.255.255.0"
}

#VPN Firewall Address Groups
resource "fortios_firewall_addrgrp" "FortiDEMO_local" {
  name = "FortiDEMO_local"
  member {
    name = fortios_firewall_address.local.name
    }
  allow_routing = "enable"
  visibility = "enable"
}

resource "fortios_firewall_policy" "policy2" {
  policyid = 104
  name = "toUbuntu"
  action = "accept"
  nat = "enable"
  schedule = "always"
  utm_status = "enable"
  fixedport = "enable"
  fsso = "enable"
  av_profile = "default"
  ssl_ssh_profile = "certificate-inspection"

  srcintf {
    name = "port1"
  }

  dstintf {
    name = "port2"
  }

    srcaddr {
    name = "all"
  }

  dstaddr {
    name = "toUbuntuVIP"
  }

  service {
    name = "HTTP"
  }

  service {
    name = "SSH"
  }

  depends_on = [
    fortios_firewall_vip.ubuntuVIP
    ]
}

resource "fortios_firewall_addrgrp" "FortiDEMO_remote" {
  name = "FortiDEMO_remote"
  member {
    name = fortios_firewall_address.remote.name
  }
  allow_routing = "enable"
  visibility = "enable"
}

#VPN IPsec phase1-interface
resource "fortios_vpnipsec_phase1interface" "FortiDEMOphase1" {
  name = "FortiDEMO"
  interface = "port1"
  peertype = "any"
  net_device = "enable"
  proposal = "aes128-sha256 aes256-sha256 aes128-sha1 aes256-sha1"
  wizard_type = "static-fortigate"
  remote_gw = "${forti_demo_ip}"
  psksecret = "fortidemo"
}

#VPN IPsec phase2-interface
resource "fortios_vpnipsec_phase2interface" "FortiDEMOphase2" {
  name = "FortiDEMO"
  phase1name = fortios_vpnipsec_phase1interface.FortiDEMOphase1.name
  proposal = "aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"
  src_addr_type = "name"
  dst_addr_type = "name"
  src_name = "FortiDEMO_local"
  dst_name = "FortiDEMO_remote"

  depends_on = [
    fortios_vpnipsec_phase1interface.FortiDEMOphase1,
    fortios_firewall_address.local,
    fortios_firewall_address.remote,
    ]
 }

#VPN Firewall Policies
resource "fortios_firewall_policy" "vpnpolicy1" {
  policyid = 100
  name = "vpn_FortiDEMO_local"
  action = "accept"
  nat = "enable"
  schedule = "always"

  srcintf {
    name = "port1"
  }

  dstintf {
    name = "FortiDEMO"
  }

  srcaddr {
    name = "FortiDEMO_local"
  }

  dstaddr {
    name = "FortiDEMO_remote"
  }

  service {
    name = "ALL"
  }

  depends_on = [
    fortios_system_interface.FortiDEMOinterface
    ]
}

resource "fortios_firewall_policy" "vpnpolicy2" {
  policyid = 101
  name = "vpn_FortiDEMO_remote"
  action = "accept"
  nat = "enable"
  schedule = "always"

  srcintf {
    name = "FortiDEMO"
  }

  dstintf {
    name = "port1"
  }

  srcaddr {
    name = "FortiDEMO_remote"
  }

  dstaddr {
    name = "FortiDEMO_local"
  }

  service {
    name = "ALL"
  }

  depends_on = [
    fortios_system_interface.FortiDEMOinterface
    ]
}

#Firewall Policies
resource "fortios_firewall_policy" "policy1" {
  policyid = 103
  name = "port1 to port1"
  action = "accept"
  nat = "enable"
  schedule = "always"

  srcintf {
    name = "port1"
  }

  dstintf {
    name = "port1"
  }

  srcaddr {
    name = "all"
  }

  dstaddr {
    name = "all"
  }

  service {
    name = "ALL"
  }
}

#VPN Interface
resource "fortios_system_interface" "FortiDEMOinterface" {
  name          = fortios_vpnipsec_phase2interface.FortiDEMOphase2.name
  description   = "VPN Interface"
  type          = "tunnel"
  vdom          = "root"
  allowaccess   = "ping ssh fabric"
  ip            = "0.0.0.0 0.0.0.0"
  remote_ip     = "0.0.0.0 0.0.0.0"
  tcp_mss       = 1400
  autogenerated = "auto"
}

#Router Configuration
resource "fortios_router_static" "Access" {
  dst = "0.0.0.0 0.0.0.0"
  device = "FortiDEMO"
  dstaddr = "FortiDEMO_remote"
  seq_num = 1

  depends_on = [
    fortios_system_interface.FortiDEMOinterface
    ]
}

resource "fortios_router_static" "blackhole" {
  dst = "0.0.0.0 0.0.0.0"
  blackhole = "enable"
  distance = 254
  dstaddr = "FortiDEMO_remote"
  seq_num = 2

  depends_on = [
    fortios_system_interface.FortiDEMOinterface
    ]
}